/**
 * 
 */
package co.edu.uniquindio.problema_algoritmo_N_reinas;

/**
 * @author GonzalezHDanielaA
 *
 */
public class algoritmo_N_Reinas {

	/**
	 * @param args
	 */
	
	public static final int NR=5;
    public static int[][] tablero= new int[NR][NR];;
    
    
	public static void main(String[] args) {

	
	}
	
	
	//Imprime la cabecera del tablero
    static String letras[]= {"A","B","C","D","E","F","G","H"};
    
    
    
    
    public static void imprimir() {
        for (int i = 0; i < NR; i++) {
            System.out.print("    "+letras[i]+"  ");
        }System.out.print("\n");
        for (int i = 0; i < NR; i++) {
            for (int j = 0; j < NR; j++) {
            
                if (i==0 && j==0) {
                    System.out.print(i+1);
                }
                else if (j>=0) {
                    if (j==0) {
                        System.out.print(i+1);
                        
                    }else{
                        System.out.print("   "+tablero[i][j]+"   ");
                        
                        if (j==4) {
                            System.out.print("   "+tablero[i][j]+"   ");
                            System.out.println("\n");
                        }
                    }
                }
            }
        }
    }
        
   public boolean posicionVerdadera(int fila, int columna) {
            
            //verificar que fila actual sea segura, verificando cada columna de esta
            for (int j = 0; j < columna; j++) 
                if (tablero[fila][j]==1) 
                    return false; 
          
            //verifica diagonal superior del lado izquierdo sea segura
            for (int i=fila, j=columna; i>=0 && j>=0; i--, j--) 
                if (tablero[i][j]==1) 
                    return false; 
          
            //verifica diagonal inferior del lado izquierdo sea segura
            for (int i=fila, j=columna; j>=0 && i<NR; i++, j--)
            {
            	 if (tablero[i][j]==1) 
                     return false;
            }
            //verifica que no hayan atacantes ni en sus lados, ni en sus diagonales
            return true;        
        }
   
   
   public static boolean solucion(int columna) {
       //Caso base: si la solucion es la correcta
       if (columna >=NR) {
           return true;
       }
       //Se considera la columna actual como una posible solución y se verifica
       for (int i = 0; i < NR; i++) {
           //verifica si se puede colocar  en el tablero[i][columna]
           if (posicionVerdadera(i, columna)) {
               
               tablero[i][columna]=1;
               //se invoca la funcion recursiva para dar solucion  a ls demad reinas del tablero
               if (solucion(columna+1)) {
                   
                   return true;
               }
               
               tablero[i][columna]=0;
               
           }   
       }
       //si no hay solucion la renia puede se colocada en ninguna fila de esta columna
       return false;
   }
    
	public static boolean inicializar() {

		if (solucion(0) == false) {
			System.out.println("No Hay solucion");
			return false;
		}
		imprimir();
		
		return true;
	}
    
	
	

}
